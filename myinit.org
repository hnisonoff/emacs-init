#+STARTUP: overview

* Package Management
  #+BEGIN_SRC emacs-lisp
    ;; Initialize package system
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (package-initialize)

    ;; Setup use-package
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t)
  #+END_SRC

* UI and Basic Settings
  #+BEGIN_SRC emacs-lisp
    ;; Frame size
    (defun get-default-height ()
      "Calculate default frame height based on display size."
      (/ (- (display-pixel-height) 120)
         (frame-char-height)))

    (add-to-list 'default-frame-alist '(width . 157))
    (add-to-list 'default-frame-alist (cons 'height (get-default-height)))

    ;; Font size
    (set-face-attribute 'default nil :height 150)

    ;; Basic UI settings
    (fset 'yes-or-no-p 'y-or-n-p)
    (show-paren-mode 1)
    (setq-default indent-tabs-mode nil)
    (setq show-paren-delay 0)
    (setq ring-bell-function 'ignore)
    (setq auto-save-default nil)
    (tool-bar-mode -1)  ;; Disable toolbar
    
    ;; Confirm on exit
    (defun ask-before-closing ()
      "Ask whether or not to close, and then close if y was pressed"
      (interactive)
      (if (y-or-n-p (format "Are you sure you want to exit Emacs? "))
          (save-buffers-kill-emacs)
        (message "Canceled exit")))

    (when window-system
      (global-set-key (kbd "C-x C-c") 'ask-before-closing))

    ;; Window management
    (winner-mode 1)
    (windmove-default-keybindings)

    ;; File and buffer settings
    (setq completion-ignored-extensions 
          '(".a" ".aux" ".bbl" ".blg" ".dvi" ".elc"
            ".lof" ".log" ".lot" ".o" ".toc" "~"))
  #+END_SRC

* Theme
  #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :config
      (load-theme 'zenburn t))
  #+END_SRC

* Navigation and Search
  #+BEGIN_SRC emacs-lisp
    ;; Ivy, Counsel, and Swiper setup
    (use-package ivy
      :diminish
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t))

    (use-package counsel
      :after ivy
      :bind (("M-x" . counsel-M-x)
             ("C-x C-f" . counsel-find-file)
             ("C-c g" . counsel-git)
             ("C-c j" . counsel-git-grep)
             ("C-c k" . counsel-ag)
             ("C-x l" . counsel-locate)))

    (use-package swiper
      :after ivy
      :bind (("C-s" . swiper)
             ("C-c C-r" . ivy-resume)
             ("<f6>" . ivy-resume)))

    ;; Dired enhancements
    (setq dired-listing-switches "-alh")
    
    ;; Use ibuffer instead of list-buffers
    (defalias 'list-buffers 'ibuffer)
  #+END_SRC

* Development Tools
  #+BEGIN_SRC emacs-lisp
    ;; Magit for Git
    (use-package magit
      :bind (("C-x g" . magit-status)))

    ;; Environment variables from shell
    (use-package exec-path-from-shell
      :if (memq window-system '(mac ns))
      :config
      (exec-path-from-shell-initialize))

    ;; Python configuration
    (add-hook 'python-mode-hook
              (lambda ()
                (setq indent-tabs-mode nil
                      tab-width 4
                      python-indent-offset 4)))
  #+END_SRC

* IDO Mode Configuration
  #+BEGIN_SRC emacs-lisp
    ;; Note: These settings are partially overridden by Ivy mode
    ;; Consider removing this section if you prefer Ivy/Counsel
    (ido-mode 1)
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    
    ;; Custom binding to convert list-directory to dired
    (defun ido-dired-from-list-directory ()
      "Convert list-directory to dired using ido."
      (interactive)
      (let ((dir default-directory))
        (kill-buffer)
        (ido-dired dir)))

    (add-hook 'list-directory-mode-hook
              (lambda ()
                (local-set-key (kbd "C-d") 'ido-dired-from-list-directory)))
  #+END_SRC
* Conda
#+begin_src emacs-lisp
  (use-package conda
    :ensure t
    :init
    (setq conda-anaconda-home "/Users/hunternisonoff/miniforge3")
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
    (conda-env-autoactivate-mode t)
    :bind
    (("C-c C-e a" . conda-env-activate)
     ("C-c C-e d" . conda-env-deactivate)
     ("C-c C-e l" . conda-env-list)))
#+end_src
* Emacs Ipython
#+begin_src emacs-lisp
  (use-package ein
    :ensure t
  )
  (setq ein:output-area-inlined-images t)
#+end_src
* Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :hook (python-mode . eglot-ensure)
    :config
    ;; Block the file watching capability based on the PR discussion
    (cl-defmethod eglot-client-capabilities :around ((_server eglot-lsp-server) &rest _)
      "Remove the workspace/didChangeWatchedFiles capability."
      (let ((caps (cl-call-next-method)))
        (setf (plist-get (plist-get caps :workspace) :didChangeWatchedFiles) nil)
        caps))

    ;; Configure Python language servers
    ;; Installed pyright with: `npm install -g pyright`
    (add-to-list 'eglot-server-programs
                 '((python-mode python-ts-mode) . ("pyright-langserver" "--stdio")))

    ;; Keybindings for eglot
    :bind (:map eglot-mode-map
           ;; Navigation
           ("M-." . xref-find-definitions)         ;; Go to definition
           ("M-?" . xref-find-references)          ;; Find references
           ("M-," . xref-pop-marker-stack)         ;; Go back
           ("C-c C-i" . eglot-find-implementation) ;; Find implementation
           ("C-c C-t" . eglot-find-typeDefinition) ;; Find type definition

           ;; Refactoring
           ("C-c C-r" . eglot-rename)              ;; Rename symbol
           ("C-c C-a" . eglot-code-actions)        ;; Code actions
           ("C-c C-o" . eglot-code-action-organize-imports) ;; Organize imports

           ;; Documentation
           ("C-c C-d" . eldoc)                     ;; Show documentation
           ("C-c C-h" . eglot-help-at-point)       ;; Detailed help

           ;; Formatting
           ("C-c C-f" . eglot-format)              ;; Format buffer
           ("C-c C-=" . eglot-format-buffer))) 
  (global-set-key (kbd "C-c f d") 'flymake-show-diagnostics-buffer)

  ;; (use-package eglot
  ;;   :ensure t
  ;;   :hook (python-mode . eglot-ensure)
  ;;   :config
  ;;   ;; Block the file watching capability based on the PR discussion
  ;;   (cl-defmethod eglot-client-capabilities :around ((_server eglot-lsp-server) &rest _)
  ;;     "Remove the workspace/didChangeWatchedFiles capability."
  ;;     (let ((caps (cl-call-next-method)))
  ;;       (setf (plist-get (plist-get caps :workspace) :didChangeWatchedFiles) nil)
  ;;       caps))

  ;;   ;; Configure Python language servers
  ;;   (add-to-list 'eglot-server-programs
  ;;                '((python-mode python-ts-mode) . ("pyright-langserver" "--stdio"))))
#+end_src
* Completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (python-mode . company-mode)
    :config
    ;; Quick completion popup
    (setq company-idle-delay 0.1)
    
    ;; Show completions after typing just one character
    (setq company-minimum-prefix-length 1)
    
    ;; Show numbers for quick selection
    (setq company-show-quick-access t)
    
    ;; Wrap around when reaching the end of suggestions
    (setq company-selection-wrap-around t)
    
    ;; Key bindings for completion navigation
    :bind (:map company-active-map
           ("C-n" . company-select-next)
           ("C-p" . company-select-previous)
           ("TAB" . company-complete-common-or-cycle)
           ("<tab>" . company-complete-common-or-cycle)))
#+end_src
* Python Formatting
#+begin_src emacs-lisp
  (use-package python-black
    :ensure t
    :after python
    :hook (python-mode . python-black-on-save-mode))
#+end_src

* Copy Remote
  #+begin_src emacs-lisp
    (use-package clipetty
      :ensure t
      :hook (after-init . global-clipetty-mode))
  #+end_src
* Latex
  #+begin_src emacs-lisp
    (use-package tex
      :ensure auctex
      :config
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
      (add-hook 'LaTeX-mode-hook 'visual-line-mode)
      (add-hook 'LaTeX-mode-hook 'flyspell-mode)
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      (setq reftex-plug-into-AUCTeX t))
  #+end_src
